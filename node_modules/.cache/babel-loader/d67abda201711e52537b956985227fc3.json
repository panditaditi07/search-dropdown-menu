{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/teainee/Documents/React-Tasks/search-dropdown-menu/src/components/DropDown/dropDown.jsx\";\n// import React, { Component } from \"react\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import {\n//   faAngleDown,\n//   faAngleUp,\n//   faTimesCircle,\n//   faCheckSquare,\n//   faSquare,\n//   faTimes,\n// } from \"@fortawesome/free-solid-svg-icons\";\n// import SearchBox from \"../SearchBox/searchBox\";\n// import styles from \"./dropDown.module.scss\";\n// import propTypes from \"prop-types\";\n// class DropDown extends Component {\n//   state = {\n//     resultList: [],\n//     OptionList: [],\n//     showList: false,\n//     selectAll: false,\n//     searchInput: \"\",\n//   };\n//   handleChange = (onChange) => {\n//     this.setState({ searchInput: onChange });\n//   };\n//   /**\n//    *\n//    * @param {result} result\n//    * stores the result\n//    */\n//   getResult = (result) => {\n//     this.setState({ resultList: [...result] });\n//   };\n//   /**\n//    *\n//    * @param {event} event\n//    * focuses on searchBar\n//    */\n//   /**\n//    * removes all selected Options\n//    */\n//   removeAllOption = () => {\n//     this.setState({ OptionList: [], selectAll: false });\n//     if (this.state.OptionList.length && this.state.hideList === true) {\n//       this.setState({ showList: true });\n//     }\n//   };\n//   /**\n//    *\n//    * @param {option} option\n//    * removes selected options\n//    */\n//   // removeOption = (option) => {\n//   //   const { OptionList } = this.state;\n//   //   const { showKey, getList } = this.props;\n//   //   let result = OptionList.filter((selectedoption) => {\n//   //     return selectedoption[showKey] !== option[showKey];\n//   //   });\n//   //   this.setState({ OptionList: result }, () => {\n//   //     getList(this.state.OptionList);\n//   //   });\n//   //   if (result.length === 0 || result.length - 1) {\n//   //     this.setState({ selectAll: false });\n//   //   }\n//   // };\n//   removeOption = (option) => {\n//     const { OptionList } = this.state;\n//     const { showKey, getList } = this.props;\n//     let getIndex = OptionList.findIndex((selectedoption) => {\n//       return selectedoption[showKey] === option[showKey];\n//     });\n//     OptionList.splice(getIndex, 1);\n//     this.setState({ OptionList: OptionList }, () => {\n//       getList(this.state.OptionList);\n//     });\n//     if (OptionList.length === 0 || OptionList.length - 1) {\n//       this.setState({ selectAll: false });\n//     }\n//   };\n//   /**\n//    *\n//    * @param {option} option\n//    * if the option is selected it removes it\n//    * and if the option is not selected it adds\n//    * to the list.\n//    */\n//   removeSelectedOption = (option) => {\n//     this.isSelected(option)\n//       ? this.removeOption(option)\n//       : this.addToList(option);\n//   };\n//   /**\n//    * it returns the select All data and sets the states.\n//    */\n//   selectAllData = () => {\n//     const { data } = this.props;\n//     const { selectAll } = this.state;\n//     const result = data.map((options) => {\n//       return options;\n//     });\n//     this.setState({ OptionList: result, selectAll: !selectAll }, () => {\n//       if (this.state.selectAll) {\n//         this.setState({ OptionList: result });\n//       } else {\n//         this.setState({ OptionList: [] });\n//       }\n//     });\n//   };\n//   /**\n//    *\n//    * @param {option}\n//    * stores array of Objects of the selected option\n//    */\n//   // addToList = (option) => {\n//   //   const { OptionList } = this.state;\n//   //   const { multipleSelect } = this.props;\n//   //   const options = [...OptionList, { ...option }];\n//   //   this.setState({ OptionList: options });\n//   //   if (!multipleSelect) {\n//   //     this.setState({ OptionList: [{ ...option }] });\n//   //     const { getList } = this.props;\n//   //     getList(option);\n//   //     this.toggle();\n//   //   }\n//   // };\n//   addToList = (option) => {\n//     const { OptionList } = this.state;\n//     const { multipleSelect, data } = this.props;\n//     const options = [...OptionList, { ...option }];\n//     if (!multipleSelect) {\n//       this.setState({ OptionList: [{ ...option }] });\n//       const { getList } = this.props;\n//       getList(option);\n//       this.toggle();\n//     } else {\n//       this.setState({ OptionList: options }, () => {\n//         if (OptionList.length + 1 === data.length) {\n//           this.setState({ selectAll: true });\n//         }\n//       });\n//     }\n//   };\n//   /**\n//    *\n//    * @param {event} event\n//    * it hides the list when out of Focus\n//    */\n//   hideList = (event) => {\n//     const { multipleSelect, getList } = this.props;\n//     const { OptionList } = this.state;\n//     if (\n//       event.currentTarget.id === \"dropdown-div\" &&\n//       !event.currentTarget.contains(event.relatedTarget)\n//     ) {\n//       this.setState({ showList: false });\n//     }\n//     if (multipleSelect && OptionList.length) {\n//       getList(OptionList);\n//     }\n//   };\n//   /**\n//    * to toggle arrow angle\n//    */\n//   toggle = () => {\n//     this.setState({ showList: !this.state.showList });\n//   };\n//   /**\n//    * @param {option}\n//    * checks wheather the option is selected\n//    */\n//   isSelected = (option) => {\n//     const { showKey } = this.props;\n//     return this.state.OptionList.some(\n//       (options) => options[showKey] === option[showKey]\n//     );\n//   };\n//   /**\n//    * it checks for selectAllOptions & OptionList length and\n//    * returns true else true false\n//    */\n//   isAllSelected = () => {\n//     if (this.state.resultList.length) return false;\n//     return true;\n//   };\n//   /**\n//    * toggles the dropdown menu\n//    */\n//   // DropDownToggle = () => {\n//   //   const { OptionList, resultList, showList } = this.state;\n//   //   this.toggle();\n//   //   if (OptionList.length && showList === false) {\n//   //     this.setState({ showList: false });\n//   //   } else if (OptionList.length && showList === true) {\n//   //     this.setState({ showList: true });\n//   //   } else if (OptionList.length && resultList.length && showList === true) {\n//   //     this.setState({ showList: true });\n//   //   }\n//   // };\n//   DropDownToggle = (event) => {\n//     if (event.target === event.currentTarget) {\n//       this.setState({ showList: !this.state.showList });\n//       return;\n//     } else {\n//       return;\n//     }\n//   };\n//   /**\n//    * checks for searched value and return no result if\n//    * not present.\n//    */\n//   // noResults = () => {\n//   //   const { showKey } = this.props;\n//   //   const result = this.state.resultList.some(\n//   //     (options) => this.state.searchInput !== options[showKey]\n//   //   );\n//   //   if (result === false && !this.state.searchInput.length) {\n//   //     return true;\n//   //   }\n//   //   if (result === true) {\n//   //     return true;\n//   //   } else if (result === false) {\n//   //     return false;\n//   //   }\n//   // };\n//   isResults = () => {\n//     if (!this.state.resultList.length && this.state.searchInput.length) {\n//       return false;\n//     } else {\n//       return true;\n//     }\n//   };\n//   /**\n//    * returns dropdown list\n//    */\n//   render() {\n//     const { showList, resultList, OptionList, selectAll } = this.state;\n//     const {\n//       placeholder,\n//       data,\n//       searchList,\n//       showKey,\n//       multipleSelect,\n//     } = this.props;\n//     const list = resultList.length ? resultList : data;\n//     return (\n//       <>\n//         <div\n//           tabIndex=\"0\"\n//           id=\"dropdown-div\"\n//           onBlur={this.hideList}\n//           className={styles[\"dropdown-div\"]}\n//           data-test=\"DropdownComponent\"\n//         >\n//           <div\n//             onClick={this.DropDownToggle}\n//             className={`${styles[\"dropdown-button\"]} ${\n//               styles[OptionList.length > 10 ? \"adjustheight\" : \"\"]\n//             }`}\n//           >\n//             <div className={styles[\"button-heading\"]}>\n//               {OptionList.length ? (\n//                 <div className={styles[\"selectedOptions\"]}>\n//                   {multipleSelect ? (\n//                     OptionList.map((optionSelected, i) => {\n//                       return (\n//                         <div className={styles[\"multiSelectOption\"]} key={i}>\n//                           {optionSelected[showKey].length > 10\n//                             ? optionSelected[showKey].substring(0, 10) + \"...\"\n//                             : optionSelected[showKey]}\n//                           <FontAwesomeIcon\n//                             onClick={() => {\n//                               this.removeOption(optionSelected);\n//                             }}\n//                             className={styles[\"removeOption\"]}\n//                             icon={faTimesCircle}\n//                           />\n//                         </div>\n//                       );\n//                     })\n//                   ) : (\n//                     <div>{OptionList[0][showKey]}</div>\n//                   )}\n//                 </div>\n//               ) : (\n//                 <>{placeholder}</>\n//               )}\n//             </div>\n//             <div className={styles[\"icons\"]}>\n//               {OptionList.length ? (\n//                 <FontAwesomeIcon\n//                   className={styles[\"removeIcon\"]}\n//                   onClick={this.removeAllOption}\n//                   icon={faTimes}\n//                 />\n//               ) : (\n//                 <></>\n//               )}\n//               <FontAwesomeIcon\n//                 onClick={this.toggle}\n//                 data-test=\"icon\"\n//                 icon={showList ? faAngleUp : faAngleDown}\n//                 className={styles[\"icon\"]}\n//               />\n//             </div>\n//           </div>\n//           {showList && (\n//             <div\n//               id=\"lists\"\n//               className={`${styles[\"dropdownlist\"]}`}\n//               onBlur={this.hideList}\n//             >\n//               <div id=\"searchInput\" className={styles[\"searchBar-div\"]}>\n//                 <SearchBox\n//                   data={data}\n//                   result={this.getResult}\n//                   searchkeys={searchList.searchkeys}\n//                   placeholder={searchList.placeholder}\n//                   className={styles[\"searchbar\"]}\n//                   onChange={this.handleChange}\n//                 />\n//               </div>\n//               {this.isResults() ? (\n//                 <div className={styles[\"allListDiv\"]}>\n//                   {multipleSelect && this.isAllSelected() ? (\n//                     <div\n//                       className={styles[\"selectAll\"]}\n//                       onClick={this.selectAllData}\n//                     >\n//                       {multipleSelect ? (\n//                         <FontAwesomeIcon\n//                           className={styles[\"check-icon\"]}\n//                           color=\"#3483eb\"\n//                           size=\"2x\"\n//                           icon={selectAll ? faCheckSquare : faSquare}\n//                         />\n//                       ) : (\n//                         <></>\n//                       )}\n//                       <p className={styles[\"selectAll-heading\"]}>Select All</p>\n//                     </div>\n//                   ) : (\n//                     <></>\n//                   )}\n//                   {list.map((option, i) => {\n//                     return (\n//                       <div\n//                         className={styles[\"lists\"]}\n//                         key={i}\n//                         onClick={() => {\n//                           this.removeSelectedOption(option);\n//                         }}\n//                         data-test=\"list\"\n//                       >\n//                         {multipleSelect ? (\n//                           <FontAwesomeIcon\n//                             color=\"#3483eb\"\n//                             size=\"2x\"\n//                             icon={\n//                               this.isSelected(option) ? faCheckSquare : faSquare\n//                             }\n//                           />\n//                         ) : (\n//                           <></>\n//                         )}\n//                         <button\n//                           className={`${styles[\"list-button\"]} ${\n//                             styles[this.isSelected(option) ? \"selected\" : \"\"]\n//                           }`}\n//                         >\n//                           {option[showKey]}\n//                         </button>\n//                       </div>\n//                     );\n//                   })}\n//                 </div>\n//               ) : (\n//                 <div className={styles[\"no-result\"]}>\n//                   <i>No results</i>\n//                 </div>\n//               )}\n//             </div>\n//           )}\n//         </div>\n//       </>\n//     );\n//   }\n// }\n// DropDown.propTypes = {\n//   /**\n//    *  must be array of objects\n//    */\n//   data: propTypes.array.isRequired,\n//   /**\n//    * must be a string (searchInput)\n//    */\n//   showKey: propTypes.string.isRequired,\n//   /**\n//    * must be a string\n//    */\n//   placeholder: propTypes.string,\n//   /**\n//    * must be an object\n//    */\n//   searchList: propTypes.object,\n//   /**\n//    * must be array of object keys and it is an object of searchList\n//    */\n//   searchkeys: propTypes.arrayOf(propTypes.string.isRequired),\n//   /**\n//    * will give the selected options\n//    */\n//   getList: propTypes.func.isRequired,\n//   /**\n//    * must be boolean for multi-select\n//    */\n//   multipleSelect: propTypes.bool,\n// };\n// DropDown.defaultProps = {\n//   placeholder: \"Select\",\n// };\n// export default DropDown;\nimport React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleDown, faAngleUp, faTimesCircle, faCheckSquare, faSquare, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport SearchBox from \"../SearchBox/searchBox\";\nimport styles from \"./dropDown.module.scss\";\nimport propTypes from \"prop-types\";\n\nclass DropDown extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      resultList: [],\n      OptionList: [],\n      DataList: [],\n      showList: false,\n      selectAll: false,\n      searchInput: \"\"\n    };\n\n    this.handleChange = searchInputValue => {\n      this.setState({\n        searchInput: searchInputValue\n      });\n    };\n\n    this.getResult = result => {\n      this.setState({\n        resultList: [...result]\n      });\n    };\n\n    this.removeAllOption = () => {\n      this.setState({\n        OptionList: [],\n        selectAll: false\n      });\n    };\n\n    this.removeOption = option => {\n      const {\n        OptionList\n      } = this.state;\n      const {\n        showKey,\n        getList\n      } = this.props;\n      let getIndex = OptionList.findIndex(selectedoption => {\n        return selectedoption[showKey] === option[showKey];\n      });\n      OptionList.splice(getIndex, 1);\n      this.setState({\n        OptionList: OptionList\n      }, () => {\n        getList(this.state.OptionList);\n      });\n      if (OptionList.length === 0 || OptionList.length - 1) return this.setState({\n        selectAll: false\n      });\n    };\n\n    this.removeSelectedOption = option => {\n      this.isSelected(option) ? this.removeOption(option) : this.addToList(option);\n    };\n\n    this.selectAllData = () => {\n      const {\n        data\n      } = this.props;\n      const {\n        selectAll\n      } = this.state;\n      const result = data.map(options => {\n        return options;\n      });\n      this.setState({\n        OptionList: result,\n        selectAll: !selectAll\n      }, () => {\n        if (this.state.selectAll) {\n          this.setState({\n            OptionList: result\n          });\n        } else {\n          this.setState({\n            OptionList: []\n          });\n        }\n      });\n    };\n\n    this.addToList = option => {\n      const {\n        OptionList\n      } = this.state;\n      const {\n        multipleSelect,\n        data\n      } = this.props;\n      const options = [...OptionList, { ...option\n      }];\n\n      if (!multipleSelect) {\n        this.setState({\n          OptionList: [{ ...option\n          }]\n        });\n        const {\n          getList\n        } = this.props;\n        getList(option);\n        this.toggle();\n      } else {\n        this.setState({\n          OptionList: options\n        }, () => {\n          const {\n            getList\n          } = this.props;\n          getList(OptionList);\n\n          if (OptionList.length + 1 === data.length) {\n            this.setState({\n              selectAll: true\n            });\n          }\n        });\n      }\n    };\n\n    this.hideList = event => {\n      const {\n        data\n      } = this.props;\n\n      if (event.currentTarget.id === \"dropdown-div\" && !event.currentTarget.contains(event.relatedTarget)) {\n        this.setState({\n          showList: false,\n          searchInput: \"\",\n          resultList: [...data]\n        });\n      }\n    };\n\n    this.toggle = () => {\n      const {\n        data\n      } = this.props;\n      this.setState({\n        showList: !this.state.showList,\n        searchInput: \"\",\n        resultList: [...data]\n      });\n    };\n\n    this.isSelected = option => {\n      const {\n        showKey\n      } = this.props;\n      return this.state.OptionList.some(options => options[showKey] === option[showKey]);\n    };\n\n    this.isAllSelected = () => {\n      if (this.state.searchInput.length) return false;else {\n        return true;\n      }\n    };\n\n    this.DropDownToggle = event => {\n      const {\n        data\n      } = this.props;\n\n      if (event.target === event.currentTarget) {\n        this.setState({\n          showList: !this.state.showList,\n          searchInput: \"\",\n          resultList: [...data]\n        });\n      } else {\n        return;\n      }\n    };\n\n    this.isResult = () => {\n      if (!this.state.resultList.length && this.state.searchInput.length) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n  }\n\n  /**\n   * returns dropdown list\n   */\n  render() {\n    const {\n      showList,\n      resultList,\n      OptionList,\n      selectAll\n    } = this.state;\n    const {\n      placeholder,\n      data,\n      searchList,\n      showKey,\n      multipleSelect\n    } = this.props;\n    const list = resultList.length ? resultList : data;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        tabIndex: \"0\",\n        id: \"dropdown-div\",\n        onBlur: this.hideList,\n        className: styles[\"dropdown-div\"],\n        \"data-test\": \"DropdownComponent\",\n        \"data-id\": \"main-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          \"data-test\": \"dropdown-button\",\n          onClick: this.DropDownToggle,\n          className: `${styles[\"dropdown-button\"]}\n             ${styles[\"adjustheight\"]}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles[\"button-heading\"],\n            children: OptionList.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles[\"selectedOptions\"],\n              children: multipleSelect ? OptionList.map((optionSelected, i) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles[\"multiSelectOption\"],\n                  \"data-test\": \"multi-select\",\n                  children: [optionSelected[showKey].length > 10 ? optionSelected[showKey].substring(0, 10) + \"...\" : optionSelected[showKey], /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    \"data-test\": \"remove-option\",\n                    onClick: () => {\n                      this.removeOption(optionSelected);\n                    },\n                    className: styles[\"removeOption\"],\n                    icon: faTimesCircle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 717,\n                    columnNumber: 27\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 709,\n                  columnNumber: 25\n                }, this);\n              }) : /*#__PURE__*/_jsxDEV(\"div\", {\n                children: OptionList[0][showKey]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 729,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: placeholder\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles[\"icons\"],\n            children: [OptionList.length ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              \"data-test\": \"removeAllOptions\",\n              className: styles[\"removeIcon\"],\n              onClick: this.removeAllOption,\n              icon: faTimes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              onClick: this.toggle,\n              \"data-test\": \"icon\",\n              icon: showList ? faAngleUp : faAngleDown,\n              className: styles[\"icon\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 736,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 11\n        }, this), showList && /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"lists\",\n          className: `${styles[\"dropdownlist\"]}`,\n          onBlur: this.hideList,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"searchInput\",\n            className: styles[\"searchBar-div\"],\n            children: /*#__PURE__*/_jsxDEV(SearchBox, {\n              data: data,\n              result: this.getResult,\n              searchkeys: searchList.searchkeys,\n              placeholder: searchList.placeholder,\n              className: styles[\"searchbar\"],\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 15\n          }, this), this.isResult() && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles[\"allListDiv\"],\n            \"data-test\": \"ifResult\",\n            children: [multipleSelect && this.isAllSelected() && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles[\"selectAll\"],\n              onClick: this.selectAllData,\n              \"data-test\": \"selectAllData\",\n              children: [multipleSelect && /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                \"data-test\": \"check-box\",\n                className: styles[\"check-icon\"],\n                color: \"#3483eb\",\n                size: \"2x\",\n                icon: selectAll ? faCheckSquare : faSquare\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: styles[\"selectAll-heading\"],\n                children: \"Select All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 789,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 775,\n              columnNumber: 21\n            }, this), list.map((option, i) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles[\"lists\"],\n                onClick: () => {\n                  this.removeSelectedOption(option);\n                },\n                \"data-test\": \"list\",\n                children: [multipleSelect && /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  color: \"#3483eb\",\n                  size: \"2x\",\n                  icon: this.isSelected(option) ? faCheckSquare : faSquare\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 804,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `${styles[\"list-button\"]} ${styles[this.isSelected(option) ? \"selected\" : \"\"]}`,\n                  children: option[showKey]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 812,\n                  columnNumber: 25\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 795,\n                columnNumber: 23\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 17\n          }, this), !this.isResult() && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles[\"no-result\"],\n            \"data-test\": \"no-result\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              children: \"No results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 826,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 825,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nDropDown.propTypes = {\n  /**\n   *  must be array of objects\n   */\n  data: propTypes.array.isRequired,\n\n  /**\n   * must be a string (searchInput)\n   */\n  showKey: propTypes.string.isRequired,\n\n  /**\n   * must be a string\n   */\n  placeholder: propTypes.string,\n\n  /**\n   * must be an object\n   */\n  searchList: propTypes.object,\n\n  /**\n   * must be array of object keys and it is an object of searchList\n   */\n  searchkeys: propTypes.arrayOf(propTypes.string.isRequired),\n\n  /**\n   * will give the selected options\n   */\n  getList: propTypes.func.isRequired,\n\n  /**\n   * must be boolean for multi-select\n   */\n  multipleSelect: propTypes.bool\n};\nDropDown.defaultProps = {\n  placeholder: \"Select\"\n};\nexport default DropDown;","map":{"version":3,"sources":["/home/teainee/Documents/React-Tasks/search-dropdown-menu/src/components/DropDown/dropDown.jsx"],"names":["React","Component","FontAwesomeIcon","faAngleDown","faAngleUp","faTimesCircle","faCheckSquare","faSquare","faTimes","SearchBox","styles","propTypes","DropDown","state","resultList","OptionList","DataList","showList","selectAll","searchInput","handleChange","searchInputValue","setState","getResult","result","removeAllOption","removeOption","option","showKey","getList","props","getIndex","findIndex","selectedoption","splice","length","removeSelectedOption","isSelected","addToList","selectAllData","data","map","options","multipleSelect","toggle","hideList","event","currentTarget","id","contains","relatedTarget","some","isAllSelected","DropDownToggle","target","isResult","render","placeholder","searchList","list","optionSelected","i","substring","searchkeys","array","isRequired","string","object","arrayOf","func","bool","defaultProps"],"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","sourcesContent":["// import React, { Component } from \"react\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import {\n//   faAngleDown,\n//   faAngleUp,\n//   faTimesCircle,\n//   faCheckSquare,\n//   faSquare,\n//   faTimes,\n// } from \"@fortawesome/free-solid-svg-icons\";\n// import SearchBox from \"../SearchBox/searchBox\";\n// import styles from \"./dropDown.module.scss\";\n// import propTypes from \"prop-types\";\n\n// class DropDown extends Component {\n//   state = {\n//     resultList: [],\n//     OptionList: [],\n//     showList: false,\n//     selectAll: false,\n//     searchInput: \"\",\n//   };\n\n//   handleChange = (onChange) => {\n//     this.setState({ searchInput: onChange });\n//   };\n//   /**\n//    *\n//    * @param {result} result\n//    * stores the result\n//    */\n//   getResult = (result) => {\n//     this.setState({ resultList: [...result] });\n//   };\n//   /**\n//    *\n//    * @param {event} event\n//    * focuses on searchBar\n//    */\n\n//   /**\n//    * removes all selected Options\n//    */\n//   removeAllOption = () => {\n//     this.setState({ OptionList: [], selectAll: false });\n//     if (this.state.OptionList.length && this.state.hideList === true) {\n//       this.setState({ showList: true });\n//     }\n//   };\n\n//   /**\n//    *\n//    * @param {option} option\n//    * removes selected options\n//    */\n//   // removeOption = (option) => {\n//   //   const { OptionList } = this.state;\n//   //   const { showKey, getList } = this.props;\n//   //   let result = OptionList.filter((selectedoption) => {\n//   //     return selectedoption[showKey] !== option[showKey];\n//   //   });\n\n//   //   this.setState({ OptionList: result }, () => {\n//   //     getList(this.state.OptionList);\n//   //   });\n\n//   //   if (result.length === 0 || result.length - 1) {\n//   //     this.setState({ selectAll: false });\n//   //   }\n//   // };\n\n//   removeOption = (option) => {\n//     const { OptionList } = this.state;\n//     const { showKey, getList } = this.props;\n\n//     let getIndex = OptionList.findIndex((selectedoption) => {\n//       return selectedoption[showKey] === option[showKey];\n//     });\n\n//     OptionList.splice(getIndex, 1);\n//     this.setState({ OptionList: OptionList }, () => {\n//       getList(this.state.OptionList);\n//     });\n\n//     if (OptionList.length === 0 || OptionList.length - 1) {\n//       this.setState({ selectAll: false });\n//     }\n//   };\n//   /**\n//    *\n//    * @param {option} option\n//    * if the option is selected it removes it\n//    * and if the option is not selected it adds\n//    * to the list.\n//    */\n\n//   removeSelectedOption = (option) => {\n//     this.isSelected(option)\n//       ? this.removeOption(option)\n//       : this.addToList(option);\n//   };\n\n//   /**\n//    * it returns the select All data and sets the states.\n//    */\n//   selectAllData = () => {\n//     const { data } = this.props;\n//     const { selectAll } = this.state;\n//     const result = data.map((options) => {\n//       return options;\n//     });\n//     this.setState({ OptionList: result, selectAll: !selectAll }, () => {\n//       if (this.state.selectAll) {\n//         this.setState({ OptionList: result });\n//       } else {\n//         this.setState({ OptionList: [] });\n//       }\n//     });\n//   };\n\n//   /**\n//    *\n//    * @param {option}\n//    * stores array of Objects of the selected option\n//    */\n//   // addToList = (option) => {\n//   //   const { OptionList } = this.state;\n//   //   const { multipleSelect } = this.props;\n//   //   const options = [...OptionList, { ...option }];\n//   //   this.setState({ OptionList: options });\n\n//   //   if (!multipleSelect) {\n//   //     this.setState({ OptionList: [{ ...option }] });\n\n//   //     const { getList } = this.props;\n//   //     getList(option);\n//   //     this.toggle();\n//   //   }\n//   // };\n\n//   addToList = (option) => {\n//     const { OptionList } = this.state;\n//     const { multipleSelect, data } = this.props;\n//     const options = [...OptionList, { ...option }];\n\n//     if (!multipleSelect) {\n//       this.setState({ OptionList: [{ ...option }] });\n//       const { getList } = this.props;\n//       getList(option);\n//       this.toggle();\n//     } else {\n//       this.setState({ OptionList: options }, () => {\n//         if (OptionList.length + 1 === data.length) {\n//           this.setState({ selectAll: true });\n//         }\n//       });\n//     }\n//   };\n//   /**\n//    *\n//    * @param {event} event\n//    * it hides the list when out of Focus\n//    */\n//   hideList = (event) => {\n//     const { multipleSelect, getList } = this.props;\n//     const { OptionList } = this.state;\n//     if (\n//       event.currentTarget.id === \"dropdown-div\" &&\n//       !event.currentTarget.contains(event.relatedTarget)\n//     ) {\n//       this.setState({ showList: false });\n//     }\n\n//     if (multipleSelect && OptionList.length) {\n//       getList(OptionList);\n//     }\n//   };\n\n//   /**\n//    * to toggle arrow angle\n//    */\n//   toggle = () => {\n//     this.setState({ showList: !this.state.showList });\n//   };\n\n//   /**\n//    * @param {option}\n//    * checks wheather the option is selected\n//    */\n//   isSelected = (option) => {\n//     const { showKey } = this.props;\n//     return this.state.OptionList.some(\n//       (options) => options[showKey] === option[showKey]\n//     );\n//   };\n//   /**\n//    * it checks for selectAllOptions & OptionList length and\n//    * returns true else true false\n//    */\n//   isAllSelected = () => {\n//     if (this.state.resultList.length) return false;\n//     return true;\n//   };\n//   /**\n//    * toggles the dropdown menu\n//    */\n\n//   // DropDownToggle = () => {\n//   //   const { OptionList, resultList, showList } = this.state;\n//   //   this.toggle();\n\n//   //   if (OptionList.length && showList === false) {\n//   //     this.setState({ showList: false });\n//   //   } else if (OptionList.length && showList === true) {\n//   //     this.setState({ showList: true });\n//   //   } else if (OptionList.length && resultList.length && showList === true) {\n//   //     this.setState({ showList: true });\n//   //   }\n//   // };\n\n//   DropDownToggle = (event) => {\n//     if (event.target === event.currentTarget) {\n//       this.setState({ showList: !this.state.showList });\n//       return;\n//     } else {\n//       return;\n//     }\n//   };\n//   /**\n//    * checks for searched value and return no result if\n//    * not present.\n//    */\n//   // noResults = () => {\n//   //   const { showKey } = this.props;\n//   //   const result = this.state.resultList.some(\n//   //     (options) => this.state.searchInput !== options[showKey]\n//   //   );\n\n//   //   if (result === false && !this.state.searchInput.length) {\n//   //     return true;\n//   //   }\n//   //   if (result === true) {\n//   //     return true;\n//   //   } else if (result === false) {\n//   //     return false;\n//   //   }\n//   // };\n//   isResults = () => {\n//     if (!this.state.resultList.length && this.state.searchInput.length) {\n//       return false;\n//     } else {\n//       return true;\n//     }\n//   };\n//   /**\n//    * returns dropdown list\n//    */\n//   render() {\n//     const { showList, resultList, OptionList, selectAll } = this.state;\n//     const {\n//       placeholder,\n//       data,\n//       searchList,\n//       showKey,\n//       multipleSelect,\n//     } = this.props;\n//     const list = resultList.length ? resultList : data;\n\n//     return (\n//       <>\n//         <div\n//           tabIndex=\"0\"\n//           id=\"dropdown-div\"\n//           onBlur={this.hideList}\n//           className={styles[\"dropdown-div\"]}\n//           data-test=\"DropdownComponent\"\n//         >\n//           <div\n//             onClick={this.DropDownToggle}\n//             className={`${styles[\"dropdown-button\"]} ${\n//               styles[OptionList.length > 10 ? \"adjustheight\" : \"\"]\n//             }`}\n//           >\n//             <div className={styles[\"button-heading\"]}>\n//               {OptionList.length ? (\n//                 <div className={styles[\"selectedOptions\"]}>\n//                   {multipleSelect ? (\n//                     OptionList.map((optionSelected, i) => {\n//                       return (\n//                         <div className={styles[\"multiSelectOption\"]} key={i}>\n//                           {optionSelected[showKey].length > 10\n//                             ? optionSelected[showKey].substring(0, 10) + \"...\"\n//                             : optionSelected[showKey]}\n//                           <FontAwesomeIcon\n//                             onClick={() => {\n//                               this.removeOption(optionSelected);\n//                             }}\n//                             className={styles[\"removeOption\"]}\n//                             icon={faTimesCircle}\n//                           />\n//                         </div>\n//                       );\n//                     })\n//                   ) : (\n//                     <div>{OptionList[0][showKey]}</div>\n//                   )}\n//                 </div>\n//               ) : (\n//                 <>{placeholder}</>\n//               )}\n//             </div>\n\n//             <div className={styles[\"icons\"]}>\n//               {OptionList.length ? (\n//                 <FontAwesomeIcon\n//                   className={styles[\"removeIcon\"]}\n//                   onClick={this.removeAllOption}\n//                   icon={faTimes}\n//                 />\n//               ) : (\n//                 <></>\n//               )}\n//               <FontAwesomeIcon\n//                 onClick={this.toggle}\n//                 data-test=\"icon\"\n//                 icon={showList ? faAngleUp : faAngleDown}\n//                 className={styles[\"icon\"]}\n//               />\n//             </div>\n//           </div>\n\n//           {showList && (\n//             <div\n//               id=\"lists\"\n//               className={`${styles[\"dropdownlist\"]}`}\n//               onBlur={this.hideList}\n//             >\n//               <div id=\"searchInput\" className={styles[\"searchBar-div\"]}>\n//                 <SearchBox\n//                   data={data}\n//                   result={this.getResult}\n//                   searchkeys={searchList.searchkeys}\n//                   placeholder={searchList.placeholder}\n//                   className={styles[\"searchbar\"]}\n//                   onChange={this.handleChange}\n//                 />\n//               </div>\n\n//               {this.isResults() ? (\n//                 <div className={styles[\"allListDiv\"]}>\n//                   {multipleSelect && this.isAllSelected() ? (\n//                     <div\n//                       className={styles[\"selectAll\"]}\n//                       onClick={this.selectAllData}\n//                     >\n//                       {multipleSelect ? (\n//                         <FontAwesomeIcon\n//                           className={styles[\"check-icon\"]}\n//                           color=\"#3483eb\"\n//                           size=\"2x\"\n//                           icon={selectAll ? faCheckSquare : faSquare}\n//                         />\n//                       ) : (\n//                         <></>\n//                       )}\n//                       <p className={styles[\"selectAll-heading\"]}>Select All</p>\n//                     </div>\n//                   ) : (\n//                     <></>\n//                   )}\n\n//                   {list.map((option, i) => {\n//                     return (\n//                       <div\n//                         className={styles[\"lists\"]}\n//                         key={i}\n//                         onClick={() => {\n//                           this.removeSelectedOption(option);\n//                         }}\n//                         data-test=\"list\"\n//                       >\n//                         {multipleSelect ? (\n//                           <FontAwesomeIcon\n//                             color=\"#3483eb\"\n//                             size=\"2x\"\n//                             icon={\n//                               this.isSelected(option) ? faCheckSquare : faSquare\n//                             }\n//                           />\n//                         ) : (\n//                           <></>\n//                         )}\n//                         <button\n//                           className={`${styles[\"list-button\"]} ${\n//                             styles[this.isSelected(option) ? \"selected\" : \"\"]\n//                           }`}\n//                         >\n//                           {option[showKey]}\n//                         </button>\n//                       </div>\n//                     );\n//                   })}\n//                 </div>\n//               ) : (\n//                 <div className={styles[\"no-result\"]}>\n//                   <i>No results</i>\n//                 </div>\n//               )}\n//             </div>\n//           )}\n//         </div>\n//       </>\n//     );\n//   }\n// }\n\n// DropDown.propTypes = {\n//   /**\n//    *  must be array of objects\n//    */\n//   data: propTypes.array.isRequired,\n//   /**\n//    * must be a string (searchInput)\n//    */\n//   showKey: propTypes.string.isRequired,\n//   /**\n//    * must be a string\n//    */\n//   placeholder: propTypes.string,\n//   /**\n//    * must be an object\n//    */\n//   searchList: propTypes.object,\n//   /**\n//    * must be array of object keys and it is an object of searchList\n//    */\n//   searchkeys: propTypes.arrayOf(propTypes.string.isRequired),\n//   /**\n//    * will give the selected options\n//    */\n//   getList: propTypes.func.isRequired,\n//   /**\n//    * must be boolean for multi-select\n//    */\n//   multipleSelect: propTypes.bool,\n// };\n\n// DropDown.defaultProps = {\n//   placeholder: \"Select\",\n// };\n// export default DropDown;\n\nimport React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faAngleDown,\n  faAngleUp,\n  faTimesCircle,\n  faCheckSquare,\n  faSquare,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport SearchBox from \"../SearchBox/searchBox\";\nimport styles from \"./dropDown.module.scss\";\nimport propTypes from \"prop-types\";\n\nclass DropDown extends Component {\n  state = {\n    resultList: [],\n    OptionList: [],\n    DataList: [],\n    showList: false,\n    selectAll: false,\n    searchInput: \"\",\n  };\n\n  handleChange = (searchInputValue) => {\n    this.setState({ searchInput: searchInputValue });\n  };\n  /**\n   *\n   * @param {result} result\n   * stores the result\n   */\n  getResult = (result) => {\n    this.setState({ resultList: [...result] });\n  };\n\n  /**\n   * removes all selected Options\n   */\n  removeAllOption = () => {\n    this.setState({ OptionList: [], selectAll: false });\n  };\n\n  /**\n   *\n   * @param {option} option\n   * removes selected options\n   */\n\n  // removeOption = (option) => {\n  //   const { OptionList } = this.state;\n  //   const { showKey, getList } = this.props;\n  //   let result = OptionList.filter((selectedoption) => {\n  //     return selectedoption[showKey] !== option[showKey];\n  //   });\n\n  //   this.setState({ OptionList: result }, () => {\n  //     getList(this.state.OptionList);\n  //   });\n\n  //   if (OptionList.length === 0 || OptionList.length - 1) {\n  //     this.setState({ selectAll: false });\n  //   }\n  // };\n\n  removeOption = (option) => {\n    const { OptionList } = this.state;\n    const { showKey, getList } = this.props;\n\n    let getIndex = OptionList.findIndex((selectedoption) => {\n      return selectedoption[showKey] === option[showKey];\n    });\n\n    OptionList.splice(getIndex, 1);\n    this.setState({ OptionList: OptionList }, () => {\n      getList(this.state.OptionList);\n    });\n\n    if (OptionList.length === 0 || OptionList.length - 1)\n      return this.setState({ selectAll: false });\n  };\n  /**\n   *\n   * @param {option} option\n   * if the option is selected it removes it\n   * and if the option is not selected it adds\n   * to the list.\n   */\n\n  removeSelectedOption = (option) => {\n    this.isSelected(option)\n      ? this.removeOption(option)\n      : this.addToList(option);\n  };\n\n  /**\n   * it returns the select All data and sets the states.\n   */\n  selectAllData = () => {\n    const { data } = this.props;\n    const { selectAll } = this.state;\n    const result = data.map((options) => {\n      return options;\n    });\n\n    this.setState({ OptionList: result, selectAll: !selectAll }, () => {\n      if (this.state.selectAll) {\n        this.setState({ OptionList: result });\n      } else {\n        this.setState({ OptionList: [] });\n      }\n    });\n  };\n\n  /**\n   *\n   * @param {option}\n   * stores array of Objects of the selected option\n   */\n  addToList = (option) => {\n    const { OptionList } = this.state;\n    const { multipleSelect, data } = this.props;\n    const options = [...OptionList, { ...option }];\n\n    if (!multipleSelect) {\n      this.setState({ OptionList: [{ ...option }] });\n      const { getList } = this.props;\n      getList(option);\n      this.toggle();\n    } else {\n      this.setState({ OptionList: options }, () => {\n        const { getList } = this.props;\n        getList(OptionList);\n        if (OptionList.length + 1 === data.length) {\n          this.setState({ selectAll: true });\n        }\n      });\n    }\n  };\n  /**\n   *\n   * @param {event} event\n   * it hides the list when out of Focus\n   */\n  hideList = (event) => {\n    const { data } = this.props;\n\n    if (\n      event.currentTarget.id === \"dropdown-div\" &&\n      !event.currentTarget.contains(event.relatedTarget)\n    ) {\n      this.setState({\n        showList: false,\n        searchInput: \"\",\n        resultList: [...data],\n      });\n    }\n  };\n\n  /**\n   * to toggle arrow angle\n   */\n  toggle = () => {\n    const { data } = this.props;\n    this.setState({\n      showList: !this.state.showList,\n      searchInput: \"\",\n      resultList: [...data],\n    });\n  };\n\n  /**\n   * @param {option}\n   * checks wheather the option is selected\n   */\n  isSelected = (option) => {\n    const { showKey } = this.props;\n    return this.state.OptionList.some(\n      (options) => options[showKey] === option[showKey]\n    );\n  };\n  /**\n   * it checks for selectAllOptions & OptionList length and\n   * returns true else true false\n   */\n  isAllSelected = () => {\n    if (this.state.searchInput.length) return false;\n    else {\n      return true;\n    }\n  };\n  /**\n   * toggles the dropdown menu\n   */\n\n  DropDownToggle = (event) => {\n    const { data } = this.props;\n    if (event.target === event.currentTarget) {\n      this.setState({\n        showList: !this.state.showList,\n        searchInput: \"\",\n        resultList: [...data],\n      });\n    } else {\n      return;\n    }\n  };\n  /**\n   * checks for searched value and return no result if\n   * not present.\n   */\n\n  isResult = () => {\n    if (!this.state.resultList.length && this.state.searchInput.length) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * returns dropdown list\n   */\n  render() {\n    const { showList, resultList, OptionList, selectAll } = this.state;\n    const {\n      placeholder,\n      data,\n      searchList,\n      showKey,\n      multipleSelect,\n    } = this.props;\n    const list = resultList.length ? resultList : data;\n\n    return (\n      <>\n        <div\n          tabIndex=\"0\"\n          id=\"dropdown-div\"\n          onBlur={this.hideList}\n          className={styles[\"dropdown-div\"]}\n          data-test=\"DropdownComponent\"\n          data-id=\"main-div\"\n        >\n          <div\n            data-test=\"dropdown-button\"\n            onClick={this.DropDownToggle}\n            className={`${styles[\"dropdown-button\"]}\n             ${styles[\"adjustheight\"]}`}\n          >\n            <div className={styles[\"button-heading\"]}>\n              {OptionList.length ? (\n                <div className={styles[\"selectedOptions\"]}>\n                  {multipleSelect ? (\n                    OptionList.map((optionSelected, i) => {\n                      return (\n                        <div\n                          className={styles[\"multiSelectOption\"]}\n                          key={i}\n                          data-test=\"multi-select\"\n                        >\n                          {optionSelected[showKey].length > 10\n                            ? optionSelected[showKey].substring(0, 10) + \"...\"\n                            : optionSelected[showKey]}\n                          <FontAwesomeIcon\n                            data-test=\"remove-option\"\n                            onClick={() => {\n                              this.removeOption(optionSelected);\n                            }}\n                            className={styles[\"removeOption\"]}\n                            icon={faTimesCircle}\n                          />\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <div>{OptionList[0][showKey]}</div>\n                  )}\n                </div>\n              ) : (\n                <>{placeholder}</>\n              )}\n            </div>\n            <div className={styles[\"icons\"]}>\n              {OptionList.length ? (\n                <FontAwesomeIcon\n                  data-test=\"removeAllOptions\"\n                  className={styles[\"removeIcon\"]}\n                  onClick={this.removeAllOption}\n                  icon={faTimes}\n                />\n              ) : (\n                <></>\n              )}\n              <FontAwesomeIcon\n                onClick={this.toggle}\n                data-test=\"icon\"\n                icon={showList ? faAngleUp : faAngleDown}\n                className={styles[\"icon\"]}\n              />\n            </div>\n          </div>\n          {showList && (\n            <div\n              id=\"lists\"\n              className={`${styles[\"dropdownlist\"]}`}\n              onBlur={this.hideList}\n            >\n              <div id=\"searchInput\" className={styles[\"searchBar-div\"]}>\n                <SearchBox\n                  data={data}\n                  result={this.getResult}\n                  searchkeys={searchList.searchkeys}\n                  placeholder={searchList.placeholder}\n                  className={styles[\"searchbar\"]}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              {this.isResult() && (\n                <div className={styles[\"allListDiv\"]} data-test=\"ifResult\">\n                  {multipleSelect && this.isAllSelected() && (\n                    <div\n                      className={styles[\"selectAll\"]}\n                      onClick={this.selectAllData}\n                      data-test=\"selectAllData\"\n                    >\n                      {multipleSelect && (\n                        <FontAwesomeIcon\n                          data-test=\"check-box\"\n                          className={styles[\"check-icon\"]}\n                          color=\"#3483eb\"\n                          size=\"2x\"\n                          icon={selectAll ? faCheckSquare : faSquare}\n                        />\n                      )}\n                      <p className={styles[\"selectAll-heading\"]}>Select All</p>\n                    </div>\n                  )}\n\n                  {list.map((option, i) => {\n                    return (\n                      <div\n                        className={styles[\"lists\"]}\n                        key={i}\n                        onClick={() => {\n                          this.removeSelectedOption(option);\n                        }}\n                        data-test=\"list\"\n                      >\n                        {multipleSelect && (\n                          <FontAwesomeIcon\n                            color=\"#3483eb\"\n                            size=\"2x\"\n                            icon={\n                              this.isSelected(option) ? faCheckSquare : faSquare\n                            }\n                          />\n                        )}\n                        <button\n                          className={`${styles[\"list-button\"]} ${\n                            styles[this.isSelected(option) ? \"selected\" : \"\"]\n                          }`}\n                        >\n                          {option[showKey]}\n                        </button>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n              {!this.isResult() && (\n                <div className={styles[\"no-result\"]} data-test=\"no-result\">\n                  <i>No results</i>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nDropDown.propTypes = {\n  /**\n   *  must be array of objects\n   */\n  data: propTypes.array.isRequired,\n  /**\n   * must be a string (searchInput)\n   */\n  showKey: propTypes.string.isRequired,\n  /**\n   * must be a string\n   */\n  placeholder: propTypes.string,\n  /**\n   * must be an object\n   */\n  searchList: propTypes.object,\n  /**\n   * must be array of object keys and it is an object of searchList\n   */\n  searchkeys: propTypes.arrayOf(propTypes.string.isRequired),\n  /**\n   * will give the selected options\n   */\n  getList: propTypes.func.isRequired,\n  /**\n   * must be boolean for multi-select\n   */\n  multipleSelect: propTypes.bool,\n};\n\nDropDown.defaultProps = {\n  placeholder: \"Select\",\n};\nexport default DropDown;\n"]},"metadata":{},"sourceType":"module"}